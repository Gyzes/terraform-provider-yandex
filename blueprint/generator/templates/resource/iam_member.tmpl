// Code generated with blueprint. You can edit it, based on your certain requirements.

package {{.PackageName}}

{{ if .TipIncluded }}
/*  Удалите этот комментарий и все комментарии с пометкой: TIP из итогового кода перед отправкой PR.

        Сгенерированный файл является готовым кодом iam_member ресурса для terraform provider yandex.
    Ниже представлен сгенерированный код, и подсказки отмеченные как TIP: --Название подсказки.
    Следуя этим подсказкам вы доработаете сгенерированный код и доведете его то рабочего состояния.

        Код сгенерированный при помощи данного шаблона является достаточно полным, и в большинстве случаев
    от вас потребуется убедиться, что все в порядке и зарегистрировать данный iam_member ресурс в provider.

        Сгенерированный код имеет следующую структуру:
         - Название пакета
         - Импорты
         - Объявление структуры ресурса
         - Конструктор ресурса
         - Методы чтения/обновления access binding для ресурса
         - Вспомогательные методы

    Если вы собираетесь вносить изменения в сгенерированный код, пожалуйста, придерживайтесь данной структуры.
    После генерации ресурса, пожалуйста не забудьте написать acc тесты в каталоге yandex-framework/test/{{.ServiceName}}/{{.PackageName}}

*/
{{- end }}

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	"github.com/yandex-cloud/terraform-provider-yandex/yandex-framework/accessbinding"
	provider_config "github.com/yandex-cloud/terraform-provider-yandex/yandex-framework/provider/config"
)

type IAMUpdater struct {
	{{.PublicPackageName}}Id      string
	ProviderConfig *provider_config.Config
}

{{if .TipIncluded}}
/*

    TIP: -- Регистрация ресурса.

            После того, как вы убедитесь в валидности сгенерированного кода,
        вы должны зарегистрировать его в провайдере. yandex-framework/provider/provider.go - метод: Resources().
        Добавьте вызов этого конструктора в слайс, который возвращает метод Resources().
*/
{{- end}}
func NewIamBinding() resource.Resource {
	return accessbinding.NewIamBinding(newIAMUpdater())
}

func newIAMUpdater() accessbinding.ResourceIamUpdater {
	return &IAMUpdater{}
}

func (u *IAMUpdater) GetResourceIamPolicy(ctx context.Context) (*accessbinding.Policy, error) {
	bindings, err := u.getAccessBindings(ctx, u.{{.PublicPackageName}}Id)
	if err != nil {
		return nil, err
	}
	return &accessbinding.Policy{Bindings: bindings}, nil
}

func (u *IAMUpdater) getAccessBindings(ctx context.Context, id string) ([]*access.AccessBinding, error) {
	var bindings []*access.AccessBinding
	pageToken := ""

	for {
	    {{if .TipIncluded}}
        /*
            TIP: -- SDK.
            Убедитесь, что вызывается правильный метод SDK. Генерация основывается на предположении, что
            SDK для вашего ресурса создан стандартным способом.
            Смело изменяйте вызов на правильный, если ваша логика работы с access binding отличается от стандартной.
        */
        {{- end}}
		resp, err := u.ProviderConfig.{{.SDKPath}}.ListAccessBindings(ctx, &access.ListAccessBindingsRequest{
			ResourceId: id,
			PageSize:   accessbinding.DefaultPageSize,
			PageToken:  pageToken,
		})
		if err != nil {
			return nil, err
		}

		bindings = append(bindings, resp.AccessBindings...)

		if resp.NextPageToken == "" {
			break
		}

		pageToken = resp.NextPageToken
	}
	return bindings, nil
}

func (u *IAMUpdater) SetResourceIamPolicy(ctx context.Context, policy *accessbinding.Policy) error {
	req := &access.SetAccessBindingsRequest{
		ResourceId:     u.{{.PublicPackageName}}Id,
		AccessBindings: policy.Bindings,
	}

	ctx, cancel := context.WithTimeout(ctx, provider_config.DefaultTimeout)
	defer cancel()

    {{if .TipIncluded}}
            /*
                TIP: -- SDK.
                Убедитесь, что вызывается правильный метод SDK. Генерация основывается на предположении, что
                SDK для вашего ресурса создан стандартным способом.
                Смело изменяйте вызов на правильный, если ваша логика работы с access binding отличается от стандартной.
            */
    {{- end}}
	op, err := u.ProviderConfig.SDK.WrapOperation(u.ProviderConfig.{{.SDKPath}}.SetAccessBindings(ctx, req))
	if err != nil {
		return fmt.Errorf("error setting access bindings of %s: %w", u.DescribeResource(), err)
	}

	err = op.Wait(ctx)
	if err != nil {
		return fmt.Errorf("error setting access bindings of %s: %w", u.DescribeResource(), err)
	}

	return nil
}

func (u *IAMUpdater) UpdateResourceIamPolicy(ctx context.Context, policy *accessbinding.PolicyDelta) error {
	var (
	    bSize  = 1000
	    deltas = policy.Deltas
	    dLen   = len(deltas)
	)

	for i := 0; i < accessbinding.CountBatches(dLen, bSize); i++ {
		req := &access.UpdateAccessBindingsRequest{
			ResourceId:          u.{{.PublicPackageName}}Id,
			AccessBindingDeltas: deltas[i*bSize : min((i+1)*bSize, dLen)],
		}

        {{if .TipIncluded}}
                /*
                    TIP: -- SDK.
                    Убедитесь, что вызывается правильный метод SDK. Генерация основывается на предположении, что
                    SDK для вашего ресурса создан стандартным способом.
                    Смело изменяйте вызов на правильный, если ваша логика работы с access binding отличается от стандартной.
                */
        {{- end}}
		op, err := u.ProviderConfig.SDK.WrapOperation(u.ProviderConfig.{{.SDKPath}}.UpdateAccessBindings(ctx, req))
		if err != nil {
			return fmt.Errorf("error updating access bindings of %s: %w", u.DescribeResource(), err)
		}

		err = op.Wait(ctx)
		if err != nil {
			return fmt.Errorf("error updating access bindings of %s: %w", u.DescribeResource(), err)
		}
	}

	return nil
}

func (u *IAMUpdater) GetMutexKey() string {
	return fmt.Sprintf("iam-{{.ServiceName}}-{{.PackageName}}-%s", u.{{.PublicPackageName}}Id)
}

func (u *IAMUpdater) DescribeResource() string {
	return fmt.Sprintf("{{.ServiceName}}-{{.PackageName}} '%s'", u.{{.PublicPackageName}}Id)
}

{{if .TipIncluded}}
        /*
            TIP: -- Название ресурса.
            Если имя вашего iam_member ресурса отличается от стандартного - измените его тут.
        */
{{- end}}
func (u *IAMUpdater) GetNameSuffix() string {
	return "{{.ServiceName}}_{{.PackageName}}_iam_binding"
}

func (u *IAMUpdater) GetSchemaAttributes() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		u.GetIdAlias(): schema.StringAttribute{Required: true},
	}
}

{{if .TipIncluded}}
        /*
            TIP: -- Название идентификатора.
            Если название поля с идентификатором для ресурса отличается от стандартного - измените его тут.
        */
{{- end}}
func (u *IAMUpdater) GetIdAlias() string {
	return "{{.PackageName}}_id"
}

func (u *IAMUpdater) GetId() string {
	return u.{{.PublicPackageName}}Id
}

func (u *IAMUpdater) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerConfig, ok := req.ProviderData.(*provider_config.Config)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *provider_config.Config, got: %T. "+
				"Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}

	u.ProviderConfig = providerConfig
}

func (u *IAMUpdater) Initialize(ctx context.Context, state accessbinding.Extractable, diag *diag.Diagnostics) {
	var id types.String
	{{if .TipIncluded}}
            /*
                TIP: -- Название идентификатора.
                Если название поля с идентификатором для ресурса отличается от стандартного - измените его тут.
            */
    {{- end}}
	diag.Append(state.GetAttribute(ctx, path.Root("{{.PackageName}}_id"), &id)...)
	u.{{.PublicPackageName}}Id = id.ValueString()
}
