// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package gitlab_instance

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/yandex-cloud/terraform-provider-yandex/common"
)

func InstanceResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"admin_email": schema.StringAttribute{
				Required:            true,
				Description:         "An email of admin user in Gitlab.",
				MarkdownDescription: "An email of admin user in Gitlab.",
			},
			"admin_login": schema.StringAttribute{
				Required:            true,
				Description:         "A login of admin user in Gitlab.",
				MarkdownDescription: "A login of admin user in Gitlab.",
			},
			"approval_rules_id": schema.StringAttribute{
				Required:            true,
				Description:         "Approval rules configuration. One of: NONE, BASIC, STANDARD, ADVANCED.",
				MarkdownDescription: "Approval rules configuration. One of: NONE, BASIC, STANDARD, ADVANCED.",
				Validators: []validator.String{
					arValidator(),
				},
			},
			"backup_retain_period_days": schema.Int64Attribute{
				Required:            true,
				Description:         "Auto backups retain period in days.",
				MarkdownDescription: "Auto backups retain period in days.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         common.ResourceDescriptions["created_at"],
				MarkdownDescription: common.ResourceDescriptions["created_at"],
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"deletion_protection": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         common.ResourceDescriptions["deletion_protection"],
				MarkdownDescription: common.ResourceDescriptions["deletion_protection"],
				Default:             booldefault.StaticBool(false),
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Description:         common.ResourceDescriptions["description"],
				MarkdownDescription: common.ResourceDescriptions["description"],
			},
			"disk_size": schema.Int64Attribute{
				Required:            true,
				Description:         "Amount of disk storage available to a instance in GB.",
				MarkdownDescription: "Amount of disk storage available to a instance in GB.",
			},
			"domain": schema.StringAttribute{
				Required:            true,
				Description:         "Domain of the Gitlab instance.",
				MarkdownDescription: "Domain of the Gitlab instance.",
				Validators: []validator.String{
					domainValidator(),
				},
			},
			"folder_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         common.ResourceDescriptions["folder_id"],
				MarkdownDescription: common.ResourceDescriptions["folder_id"],
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplace(),
				},
			},
			"gitlab_version": schema.StringAttribute{
				Computed:            true,
				Description:         "Version of Gitlab on instance.",
				MarkdownDescription: "Version of Gitlab on instance.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         common.ResourceDescriptions["id"],
				MarkdownDescription: common.ResourceDescriptions["id"],
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         common.ResourceDescriptions["labels"],
				MarkdownDescription: common.ResourceDescriptions["labels"],
				Validators: []validator.Map{
					labelKeysValidator(),
					labelValuesValidator(),
				},
			},
			"maintenance_delete_untagged": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The `true` value means that untagged images will be deleted during maintenance.",
				MarkdownDescription: "The `true` value means that untagged images will be deleted during maintenance.",
				Default:             booldefault.StaticBool(false),
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         common.ResourceDescriptions["name"],
				MarkdownDescription: common.ResourceDescriptions["name"],
				Validators: []validator.String{
					nameValidator(),
				},
			},
			"resource_preset_id": schema.StringAttribute{
				Required:            true,
				Description:         "ID of the preset for computational resources available to the instance (CPU, memory etc.). One of: s2.micro, s2.small, s2.medium, s2.large.",
				MarkdownDescription: "ID of the preset for computational resources available to the instance (CPU, memory etc.). One of: s2.micro, s2.small, s2.medium, s2.large.",
				Validators: []validator.String{
					resourcePresetValidator(),
				},
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "Status of the instance.",
				MarkdownDescription: "Status of the instance.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"subnet_id": schema.StringAttribute{
				Required:            true,
				Description:         "ID of the subnet where the GitLab instance is located.",
				MarkdownDescription: "ID of the subnet where the GitLab instance is located.",
			},
			"updated_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The timestamp when the instance was updated.",
				MarkdownDescription: "The timestamp when the instance was updated.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
		Blocks: map[string]schema.Block{
			"timeouts": schema.SingleNestedBlock{
				CustomType: timeouts.Type{},
			},
		},
		Description: "Managed Gitlab instance.",
	}
}
